#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Tangling Parentheses from Prose
#+DATE: 
#+AUTHOR: Edward John Steere
#+EMAIL: 
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.6)
#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil
#+OPTIONS: reveal_single_file:nil reveal_slide_number:nil
#+OPTIONS: reveal_title_slide:auto reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: reveal.js
#+REVEAL_TRANS: default
#+REVEAL_SPEED: default
#+REVEAL_THEME: sky
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 1
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_POSITION:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_SIZE:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_POSITION:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_DEFAULT_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css

* Story Time
#+BEGIN_EXPORT html
<iframe width="835" height="480" src="https://www.youtube.com/embed/Av0PQDVTP4A?rel=0#t=0m56s" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT
* What is Literate Programming?
** We Try to Write Code Which Reads Well
#+BEGIN_NOTES
In Clojure We Generally Succeed
#+END_NOTES
** Can You Tell me Why this Code Was Written?
#+BEGIN_SRC clojure
(defn counted-thread-factory
  "Create a ThreadFactory that maintains a counter for 
     naming Threads. name-format specifies thread 
     names - use %d to include counter
     daemon is a flag for whether threads are
     daemons or not"
  [name-format daemon]
  (let [counter (atom 0)]
    (reify
      ThreadFactory
      (newThread [this runnable]
        (doto (Thread. runnable)
          (.setName (format name-format (swap! counter inc)))
          (.setDaemon daemon))))))
#+END_SRC
#+BEGIN_NOTES
This code comes from the core.async library.  It's pretty easy to read
what it's doing.  It's pretty hard to figure out why we need it
without some kind of external knowledge.
#+END_NOTES

** Coding in English Can Suck
#+BEGIN_SRC cobol
  PROCEDURE DIVISION.
      DISPLAY "Enter first number  (1 digit) : " WITH NO ADVANCING.
      ACCEPT Num1.
      DISPLAY "Enter second number (1 digit) : " WITH NO ADVANCING.
      ACCEPT Num2.
      MULTIPLY Num1 BY Num2 GIVING Result.
      DISPLAY "Result is = ", Result.
      STOP RUN.
#+END_SRC
#+BEGIN_NOTES
Any language designed to read more like English ends up looking as if
you speak formal English to a Woman who you're trying to ask out on a
date.  It's not going to go well.  You're going to end up having to
declare all sorts of things in advance and things are just doomed to
fail.
#+END_NOTES

** What About Using Long Names?

#+BEGIN_SRC java

#+END_SRC

#+BEGIN_NOTES
Telling a Computer What to do in an English Like Style Sucks
#+END_NOTES

** Spring is Supposed to Make things Better, but...

AbstractSingletonProxyFactoryBean: a proxy factory bean for you to
subclass so that you can proxy factory beans that create singletons.

(source: https://www.quora.com/What-are-the-most-ridiculous-Java-class-names-from-real-code)

** Another Case in Point

#+BEGIN_SRC java
  public class QuoteClient extends WebServiceGatewaySupport {
      private static final Logger log = LoggerFactory
          .getLogger(QuoteClient.class);
      public GetQuoteResponse getQuote(String ticker) {
          GetQuote request = new GetQuote();
          request.setSymbol(ticker);
          log.info("Requesting quote for " + ticker);
          GetQuoteResponse response = (GetQuoteResponse)
              getWebServiceTemplate()
              .marshalSendAndReceive(
                  "http://www.webservicex.com/stockquote.asmx",
                  request,
                  new SoapActionCallback("http://www.webserviceX.NET/GetQuote"));
          return response;
      }
  }
#+END_SRC

#+BEGIN_NOTES
This is supposed to be simple.
#+END_NOTES

* How About We Swap Out English for Clojure?
** 
#+BEGIN_SRC clojure
  (map pull-out-weeds flower-patches)
#+END_SRC
#+BEGIN_NOTES
Telling a Human How to do Something with Code Also Sucks.  Let's tell
Oscar, our gardener to pull all of the weeds out of the flower patch.
Oh no!  We forgot to tell him to be careful about the bulbs with no
sprouts which we've planted but aren't yet visible!
#+END_NOTES
** 
#+BEGIN_SRC clojure
  (let [only-weeds (partial filter is-flower-or-bulb)]
    (map (comp pull-out-weeds only-weeds) flower-patches))
#+END_SRC
#+BEGIN_NOTES
There we go.  Isn't that much better.
#+END_NOTES
** 
#+BEGIN_SRC clojure
  (let [cappuccino-ingredients '(steamed-milk espresso foam)
        empty-cup              '()
        pour                   (fn [liquid cup] (cons liquid cup))]
    (reduce (fn [ingredient coffee]
              (if (contains? cappuccino-ingredients ingredient)
                (pour ingredient coffee)
                coffee))
            empty-cup
            '(steamed-milk knife cold-milk hot-water espresso
              muffin foam chocolate-syrup sprinkles coffee-grinder
              unpaid-e-toll filter-coffee)))
#+END_SRC

#+BEGIN_NOTES
But what if we want to describe how to make a really good coffee?
Let's try it with some flair this time!  Well my friend let me tell
you.  You simply let cappuccino ingredients be the list containing
steamed-milk, espresso and foam.  Grab yourself an empty list and name
it by the vessel into which our delectable stimulant will appear.
Dunno how to pour, well that's fine because all we need to do is join
one liquid straight onto the head of the rest.

Ready for the magical part?  Oldest trick in the book, we simply look
at everything coffee related in the kitchen until we find the things
which are part of the cappuccino ingredients and pour them in.  Enjoy.
#+END_NOTES
* What is Literate Programming
** Docstrings...

| java.lang.String | beanName                                                                    |
|                  | The ejb-name of the Enterprise Java Bean to which this reference is mapped. |
| java.lang.String | description                                                                 |
|                  | A string describing the bean.                                               |
#+BEGIN_NOTES
You Might Be Thinking of Docstrings
You Are Wrong! -- Who Understands EJBs by Reading the Doc
#+END_NOTES

** Invented by Knuth

[[./Knuth-Is-My-Homeboy.png]]

(source: https://blog.codinghorror.com/the-enduring-art-of-computer-programming/)

** Write a Document which Happens to Contain Code
#+BEGIN_NOTES
Idea is Simpler
Natural Language + Code = Mind Blown
Talk About the Idea and Sprinkle in Some Code When Needed
#+END_NOTES

** 
#+BEGIN_SRC org
  ,* Merge Sort
  The trick is to sort every singleton list and then sort the
  resulting combinations of lists until there is only one list
  left.

  ,#+BEGIN_SRC clojure
    (defn merge-sort
      [xs]
      (let [pairs
            <<pairs>>]
        (loop [lists (map list xs)]
          (if (> 1 (length lists))
            (recur (map
                    <<merge>> (pairs lists)))
            (first lists)))))
  ,#+END_SRC
#+END_SRC

** 
#+BEGIN_SRC org
  Given two sorted lists, xs and ys we can create a sorted list zs, 
  by consuming the next smallest element from either.  If one of 
  them is empty then we then we simply concatenate it to the 
  result list.
  ,#+BEGIN_SRC clojure :noweb-ref merge
    (fn merge
      [xs ys zs]
      (let [other-list (if (empty? ys) xs (if (empty? xs) ys) nil)]
        (if (null? empty-list)
          (let [x (first xs)
                y (first ys)]
            (if (<= x y)
              (merge (rest xs) ys        (cons x zs))
              (merge xs        (rest ys) (cons y zs)))))
        (concat other-list zs)))
  ,#+END_SRC
#+END_SRC

** 
#+BEGIN_SRC org
  To get the pairs of lists we take two then drop two until there's
  nothing left.

  ,#+BEGIN_SRC clojure
    (fn pairs
      [xs]
      (if (empty? xs) xs
          (cons (take 2 xs)
                (pairs (drop 2 xs)))))
  ,#+END_SRC
#+END_SRC

** Tangling and Weaving
#+BEGIN_NOTES
Two Principles: Tangle and Weave
#+END_NOTES
* Real(ish) Project Time!

[[./Your-Lecture-Is-Interesting.jpg]]

(source: http://myhashapp.com/blog/?p=44)
